!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	0.0	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/codemaster/dev/projects/geodpy/src/geodpy/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
Body	body.py	/^class Body:$/;"	c
BodyPlotter	plotters/body_plotter.py	/^class BodyPlotter(metaclass=ABCMeta):$/;"	c
BodyPlotter2D	plotters/plotters2D/body_plotter_2D.py	/^class BodyPlotter2D(BodyPlotter, metaclass=ABCMeta):$/;"	c
BodyPlotter3D	plotters/plotters3D/body_plotter_3D.py	/^class BodyPlotter3D(BodyPlotter, metaclass=ABCMeta):$/;"	c
Cartesian	coordinates/cartesian.py	/^class Cartesian(Coordinates):$/;"	c
CartesianPlot2D	plotters/plotters2D/cartesian_plot_2D.py	/^class CartesianPlot2D(BodyPlotter2D, BodyPlotter):$/;"	c
CartesianPlot3D	plotters/plotters3D/cartesian_plot_3D.py	/^class CartesianPlot3D(BodyPlotter3D, BodyPlotter):$/;"	c
Coordinates	coordinates/coordinates.py	/^class Coordinates(metaclass=ABCMeta):$/;"	c
For the Schwarzschild metric	validationTests/README.md	/^#### For the Schwarzschild metric$/;"	t
Geodesics	geodesics.py	/^class Geodesics:$/;"	c
Lemaitre	coordinates/lemaitre.py	/^class Lemaitre(Coordinates):$/;"	c
OblongEllipsoid	coordinates/oblong_ellipsoid.py	/^class OblongEllipsoid(Coordinates):$/;"	c
PolarPlot	plotters/plotters2D/polar_plot.py	/^class PolarPlot(BodyPlotter2D, BodyPlotter):$/;"	c
Spherical	coordinates/spherical.py	/^class Spherical(OblongEllipsoid):$/;"	c
T	coordinates/lemaitre.py	/^    T, ρ, θ, φ                  = coords$/;"	v	class:Lemaitre
__contravariant_acc	geodesics.py	/^    def __contravariant_acc(self) -> Array:$/;"	m	class:Geodesics	typeref:typename:Array	file:
__covariant_acc	geodesics.py	/^    def __covariant_acc(self) -> Array:$/;"	m	class:Geodesics	typeref:typename:Array	file:
__diff_equations_system	body.py	/^    def __diff_equations_system(dτ, state, equations) -> tuple:$/;"	m	class:Body	typeref:typename:tuple	file:
__init__	body.py	/^    def __init__(self, geodesics: Geodesics = None, position_vec: list = [0,0,0,0], velocity_vec/;"	m	class:Body	typeref:typename:None
__init__	geodesics.py	/^    def __init__(self, coordinates: Coordinates, gₘₖ: Matrix):$/;"	m	class:Geodesics
__init__	plotters/body_plotter.py	/^    def __init__(self, body: Body) -> None:$/;"	m	class:BodyPlotter	typeref:typename:None
__update_animation	plotters/plotters2D/cartesian_plot_2D.py	/^        def __update_animation(frame, line):$/;"	f	member:CartesianPlot2D.animate	file:
__update_animation	plotters/plotters2D/polar_plot.py	/^        def __update_animation(frame, line):$/;"	f	member:PolarPlot.animate	file:
__update_animation	plotters/plotters3D/cartesian_plot_3D.py	/^        def __update_animation(frame, line):$/;"	f	member:CartesianPlot3D.animate	file:
_prt_info	plotters/body_plotter.py	/^    def _prt_info(coord_name: str, ordering: str, used: str, comment: str = None) -> None:$/;"	m	class:BodyPlotter	typeref:typename:None
_update_title	plotters/body_plotter.py	/^    def _update_title(self,frame: int) -> str:$/;"	m	class:BodyPlotter	typeref:typename:str
add_circle	plotters/plotters2D/body_plotter_2D.py	/^    def add_circle(self, center: tuple[float, float], radius: float, edgecolor: str, facecolor: /;"	m	class:BodyPlotter2D	typeref:typename:None
add_custom_patches	plotters/plotters2D/body_plotter_2D.py	/^    def add_custom_patches(*argv) -> None:$/;"	m	class:BodyPlotter2D	typeref:typename:None
add_custom_surface	plotters/plotters3D/body_plotter_3D.py	/^    def add_custom_surface(self, x: np.array, y: np.array, z: np.array, facecolor: str = 'k') ->/;"	m	class:BodyPlotter3D	typeref:typename:None
add_sphere	plotters/plotters3D/body_plotter_3D.py	/^    def add_sphere(self, center: tuple[float, float], radius: float, facecolor: str) -> None:$/;"	m	class:BodyPlotter3D	typeref:typename:None
animate	plotters/body_plotter.py	/^    def animate(self, frame_interval: int = 20) -> None:$/;"	m	class:BodyPlotter	typeref:typename:None
animate	plotters/plotters2D/cartesian_plot_2D.py	/^    def animate(self, frame_interval: int = 20) -> None:$/;"	m	class:CartesianPlot2D	typeref:typename:None
animate	plotters/plotters2D/polar_plot.py	/^    def animate(self, frame_interval: int = 20) -> None:$/;"	m	class:PolarPlot	typeref:typename:None
animate	plotters/plotters3D/cartesian_plot_3D.py	/^    def animate(self, frame_interval: int = 20) -> None:$/;"	m	class:CartesianPlot3D	typeref:typename:None
animation	plotters/body_plotter.py	/^import matplotlib.animation as animation$/;"	I	nameref:module:matplotlib.animation
animation	plotters/plotters2D/cartesian_plot_2D.py	/^import matplotlib.animation as animation$/;"	I	nameref:module:matplotlib.animation
animation	plotters/plotters2D/polar_plot.py	/^import matplotlib.animation as animation$/;"	I	nameref:module:matplotlib.animation
animation	plotters/plotters3D/cartesian_plot_3D.py	/^import matplotlib.animation as animation$/;"	I	nameref:module:matplotlib.animation
basic	utilities/base_run.py	/^def basic($/;"	f	typeref:typename:None
calculate_velocities	body.py	/^    def calculate_velocities(self, **kwargs) -> np.array:$/;"	m	class:Body	typeref:typename:np.array
check_h	validationTests/schwarzschild.py	/^def check_h(body: Body, rs: float, tol: float = 0.00001) -> None:$/;"	f	typeref:typename:None
check_k	validationTests/schwarzschild.py	/^def check_k(body: Body, rs: float, tol: float = 0.00001) -> None:$/;"	f	typeref:typename:None
clear_plots	plotters/body_plotter.py	/^    def clear_plots(self) -> None:$/;"	m	class:BodyPlotter	typeref:typename:None
coords	coordinates/cartesian.py	/^    coords: tuple[Function]     = (Function('t')(interval), Function('x')(interval), Function('y/;"	v	class:Cartesian	typeref:typename:tuple[Function]
coords	coordinates/coordinates.py	/^    def coords():$/;"	m	class:Coordinates
coords	coordinates/lemaitre.py	/^    coords: tuple[Function]     = (Function('T')(interval), Function('ρ')(interval), Function('/;"	v	class:Lemaitre	typeref:typename:tuple[Function]
coords	coordinates/oblong_ellipsoid.py	/^    coords: tuple[Function]     = (Function('t')(interval), Function('r')(interval), Function('θ/;"	v	class:OblongEllipsoid	typeref:typename:tuple[Function]
coords_string	coordinates/cartesian.py	/^    coords_string: tuple[str]   = ('t', 'x', 'y', 'z')$/;"	v	class:Cartesian	typeref:typename:tuple[str]
coords_string	coordinates/coordinates.py	/^    def coords_string():$/;"	m	class:Coordinates
coords_string	coordinates/lemaitre.py	/^    coords_string: tuple[str]   = ('T', 'ρ', 'θ', 'φ')$/;"	v	class:Lemaitre	typeref:typename:tuple[str]
coords_string	coordinates/oblong_ellipsoid.py	/^    coords_string: tuple[str]   = ('t', 'r', 'θ', 'φ')$/;"	v	class:OblongEllipsoid	typeref:typename:tuple[str]
expr_to_lambda	to_lambda.py	/^def expr_to_lambda(coordinates: Coordinates, expression: Function) -> Callable:$/;"	f	typeref:typename:Callable
get_cartesian_body	body.py	/^    def get_cartesian_body(self, **kwargs):$/;"	m	class:Body
get_spherical_body	body.py	/^    def get_spherical_body(self, **kwargs):$/;"	m	class:Body
info	plotters/body_plotter.py	/^    def info(self) -> None:$/;"	m	class:BodyPlotter	typeref:typename:None
info	plotters/plotters2D/cartesian_plot_2D.py	/^    def info(self, print_info: bool = False) -> None:$/;"	m	class:CartesianPlot2D	typeref:typename:None
info	plotters/plotters2D/polar_plot.py	/^    def info(self) -> None:$/;"	m	class:PolarPlot	typeref:typename:None
info	plotters/plotters3D/cartesian_plot_3D.py	/^    def info(self) -> None:$/;"	m	class:CartesianPlot3D	typeref:typename:None
interval	coordinates/cartesian.py	/^    interval: Symbol            = symbols('s')$/;"	v	class:Cartesian	typeref:typename:Symbol
interval	coordinates/coordinates.py	/^    def interval():$/;"	m	class:Coordinates
interval	coordinates/lemaitre.py	/^    interval: Symbol            = symbols('s')$/;"	v	class:Lemaitre	typeref:typename:Symbol
interval	coordinates/oblong_ellipsoid.py	/^    interval: Symbol            = symbols('s')$/;"	v	class:OblongEllipsoid	typeref:typename:Symbol
np	body.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	coordinates/cartesian.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	coordinates/coordinates.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	coordinates/lemaitre.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	coordinates/oblong_ellipsoid.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	coordinates/spherical.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	geodesics.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	plotters/body_plotter.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	plotters/plotters2D/cartesian_plot_2D.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	plotters/plotters2D/polar_plot.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	plotters/plotters3D/body_plotter_3D.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	plotters/plotters3D/cartesian_plot_3D.py	/^import numpy as np$/;"	I	nameref:module:numpy
np	validationTests/schwarzschild.py	/^import numpy as np$/;"	I	nameref:module:numpy
patches	plotters/plotters2D/body_plotter_2D.py	/^import matplotlib.patches as patches$/;"	I	nameref:module:matplotlib.patches
patches	plotters/plotters2D/polar_plot.py	/^import matplotlib.patches as patches$/;"	I	nameref:module:matplotlib.patches
patches	plotters/plotters3D/cartesian_plot_3D.py	/^import matplotlib.patches as patches$/;"	I	nameref:module:matplotlib.patches
patches	utilities/base_run.py	/^import matplotlib.patches as patches$/;"	I	nameref:module:matplotlib.patches
plot	plotters/body_plotter.py	/^    def plot(self, title: str) -> None:$/;"	m	class:BodyPlotter	typeref:typename:None
plot	plotters/plotters2D/cartesian_plot_2D.py	/^    def plot(self, title: str) -> None:$/;"	m	class:CartesianPlot2D	typeref:typename:None
plot	plotters/plotters2D/polar_plot.py	/^    def plot(self, title: str) -> None:$/;"	m	class:PolarPlot	typeref:typename:None
plot	plotters/plotters3D/cartesian_plot_3D.py	/^    def plot(self, title: str) -> None:$/;"	m	class:CartesianPlot3D	typeref:typename:None
plot_velocity	plotters/body_plotter.py	/^    def plot_velocity(self, title: str) -> None:$/;"	m	class:BodyPlotter	typeref:typename:None
plt	plotters/body_plotter.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	plotters/plotters2D/body_plotter_2D.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	plotters/plotters2D/cartesian_plot_2D.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	plotters/plotters2D/polar_plot.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	plotters/plotters3D/body_plotter_3D.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
plt	plotters/plotters3D/cartesian_plot_3D.py	/^import matplotlib.pyplot as plt$/;"	I	nameref:module:matplotlib.pyplot
r	coordinates/oblong_ellipsoid.py	/^    t, r, θ, φ                  = coords$/;"	v	class:OblongEllipsoid
save_animation	plotters/body_plotter.py	/^    def save_animation(self, file_name: str = "body", dpi=100) -> None:$/;"	m	class:BodyPlotter	typeref:typename:None
save_plot	plotters/body_plotter.py	/^    def save_plot(self, file_name: str = "body") -> None:$/;"	m	class:BodyPlotter	typeref:typename:None
save_plot_velocity	plotters/body_plotter.py	/^    def save_plot_velocity(self, file_name: str = "body_velocity") -> None:$/;"	m	class:BodyPlotter	typeref:typename:None
show	plotters/body_plotter.py	/^    def show(self) -> None:$/;"	m	class:BodyPlotter	typeref:typename:None
simplify	geodesics.py	/^    def simplify(self):$/;"	m	class:Geodesics
solve_trajectory	body.py	/^    def solve_trajectory($/;"	m	class:Body	typeref:typename:np.array
t	coordinates/cartesian.py	/^    t, x, y, z                  = coords$/;"	v	class:Cartesian
t	coordinates/oblong_ellipsoid.py	/^    t, r, θ, φ                  = coords$/;"	v	class:OblongEllipsoid
to_cartesian	coordinates/cartesian.py	/^    def to_cartesian(pos: np.array, **kwargs) -> np.array:$/;"	m	class:Cartesian	typeref:typename:np.array
to_cartesian	coordinates/coordinates.py	/^    def to_cartesian(pos: np.array, **kwargs):$/;"	m	class:Coordinates
to_cartesian	coordinates/lemaitre.py	/^    def to_cartesian(pos: np.array, **kwargs) -> np.array:$/;"	m	class:Lemaitre	typeref:typename:np.array
to_cartesian	coordinates/oblong_ellipsoid.py	/^    def to_cartesian(pos: np.array, **kwargs) -> np.array:$/;"	m	class:OblongEllipsoid	typeref:typename:np.array
to_cartesian	coordinates/spherical.py	/^    def to_cartesian(pos: np.array, **kwargs) -> np.array:$/;"	m	class:Spherical	typeref:typename:np.array
to_spherical	coordinates/cartesian.py	/^    def to_spherical(pos: np.array, **kwargs) -> np.array:$/;"	m	class:Cartesian	typeref:typename:np.array
to_spherical	coordinates/coordinates.py	/^    def to_spherical(pos: np.array, **kwargs):$/;"	m	class:Coordinates
to_spherical	coordinates/lemaitre.py	/^    def to_spherical(pos: np.array, **kwargs) -> np.array:$/;"	m	class:Lemaitre	typeref:typename:np.array
to_spherical	coordinates/oblong_ellipsoid.py	/^    def to_spherical(pos: np.array, **kwargs) -> np.array:$/;"	m	class:OblongEllipsoid	typeref:typename:np.array
to_spherical	coordinates/spherical.py	/^    def to_spherical(pos: np.array, **kwargs) -> np.array:$/;"	m	class:Spherical	typeref:typename:np.array
vector_to_lambda	to_lambda.py	/^def vector_to_lambda(coordinates: Coordinates, expressions: Array) -> list[Callable]:$/;"	f	typeref:typename:list[Callable]
velocity_equation	coordinates/cartesian.py	/^    def velocity_equation(cls, **kwargs) -> Function:$/;"	m	class:Cartesian	typeref:typename:Function
velocity_equation	coordinates/coordinates.py	/^    def velocity_equation(cls, **kwargs):$/;"	m	class:Coordinates
velocity_equation	coordinates/lemaitre.py	/^    def velocity_equation(cls, **kwargs) -> Function:$/;"	m	class:Lemaitre	typeref:typename:Function
velocity_equation	coordinates/oblong_ellipsoid.py	/^    def velocity_equation(cls, **kwargs) -> Function:$/;"	m	class:OblongEllipsoid	typeref:typename:Function
velocity_equation	coordinates/spherical.py	/^    def velocity_equation(cls, **kwargs) -> Function:$/;"	m	class:Spherical	typeref:typename:Function
x	coordinates/cartesian.py	/^    t, x, y, z                  = coords$/;"	v	class:Cartesian
y	coordinates/cartesian.py	/^    t, x, y, z                  = coords$/;"	v	class:Cartesian
z	coordinates/cartesian.py	/^    t, x, y, z                  = coords$/;"	v	class:Cartesian
θ	coordinates/lemaitre.py	/^    T, ρ, θ, φ                  = coords$/;"	v	class:Lemaitre
θ	coordinates/oblong_ellipsoid.py	/^    t, r, θ, φ                  = coords$/;"	v	class:OblongEllipsoid
ρ	coordinates/lemaitre.py	/^    T, ρ, θ, φ                  = coords$/;"	v	class:Lemaitre
φ	coordinates/lemaitre.py	/^    T, ρ, θ, φ                  = coords$/;"	v	class:Lemaitre
φ	coordinates/oblong_ellipsoid.py	/^    t, r, θ, φ                  = coords$/;"	v	class:OblongEllipsoid
